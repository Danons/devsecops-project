name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Run Unit Tests
        run: npm test

  sast_scan:
    needs: build_and_test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      # - name: Run ESLint (Linting)
        # run: npx eslint . --ext .js # Anda perlu konfigurasi ESLint
        # Untuk kesederhanaan, kita lewati setup ESLint. Tambahkan jika perlu.

      - name: Run NPM Audit (Dependency Scanning)
        # Gagal jika ditemukan kerentanan CRITICAL
        run: npm audit --audit-level=critical

  dast_scan:
    needs: deploy_staging
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          # Kita perlu menjalankan aplikasi di dalam CI untuk dipindai.
          # Cara termudah adalah menggunakan Docker.
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          target: 'http://${{ secrets.STAGING_HOST }}:3001'
          # Untuk DAST yang benar, aplikasi harus di-deploy ke env test terlebih dahulu.
          # Untuk contoh ini, kita akan menunjuk ke URL placeholder.
          # Di skenario nyata, job 'deploy_staging' akan berjalan sebelum 'dast_scan'.

  deploy_staging:
    needs: sast_scan # Idealnya juga 'dast_scan'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub (atau registry lain)
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/devsecops-project:latest

      - name: Deploy to Staging Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.STAGING_PORT }}
          script: |
            # ... (perintah docker pull, stop, rm tetap sama) ...  
            docker run -d --name my-app \
            -p 3001:3000 \ # <-- UBAH BARIS INI
            --restart always \
            -e SESSION_SECRET='${{ secrets.SESSION_SECRET }}' \
            ${{ secrets.DOCKER_USERNAME }}/devsecops-project:latest