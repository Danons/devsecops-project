name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [ main ] # Kita sederhanakan hanya berjalan di branch main
  pull_request:
    branches: [ main ]

permissions:
  issues: write

jobs:
  build_and_test:

    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        # Variabel lingkungan untuk database sementara
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        # Opsi untuk memeriksa kesehatan database sebelum tes dijalankan
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

    # Job ini tetap berjalan di server GitHub untuk testing awal
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install dependencies
        run: npm install
      - name: Run Unit Tests
        run: npm test

      - name: Run Unit Tests
        env:
          # Variabel ini akan digunakan oleh aplikasi saat 'npm test' berjalan
          DB_HOST: localhost 
          DB_PORT: 5432 # Gunakan port yang dipetakan dari service container
          DB_USER: testuser
          DB_PASSWORD: testpassword
          DB_NAME: testdb
          SESSION_SECRET: a-test-secret-for-ci
        run: npm test
  

  sast_scan:
    needs: build_and_test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install dependencies
        run: npm install
      - name: Run NPM Audit (Dependency Scanning)
        run: npm audit --audit-level=critical

  deploy_and_scan_on_staging:
    name: Deploy and DAST Scan on Staging
    # Job ini bergantung pada 2 job sebelumnya
    needs: [build_and_test, sast_scan]
    # PERUBAHAN KUNCI: Menjalankan job ini di runner kita sendiri
    runs-on: self-hosted 
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/devsecops-project:latest

      - name: Deploy Application Locally on Runner
        run: |
          echo "Deploying application on self-hosted runner..."
          docker pull ${{ secrets.DOCKER_USERNAME }}/devsecops-project:latest
          docker stop my-app || true
          docker rm my-app || true
          docker run -d --name my-app \
            -p 3001:3000 \
            --restart always \
            -e SESSION_SECRET='${{ secrets.SESSION_SECRET }}' \
            ${{ secrets.DOCKER_USERNAME }}/devsecops-project:latest
      
      - name: Wait for application to be ready
        # Beri waktu beberapa detik agar aplikasi di dalam container siap
        run: sleep 30

      - name: Run DAST Scan on Local Application
        # Menjalankan ZAP Scan dari runner yang sama ke aplikasi yang juga berjalan di mesin yang sama
        continue-on-error: true
        uses: zaproxy/action-baseline@v0.12.0
        with:
          # Targetnya adalah localhost, karena scanner dan aplikasi ada di mesin yang sama
          target: 'http://localhost:3001'