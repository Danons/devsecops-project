name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [ main ] # Kita sederhanakan hanya berjalan di branch main
  pull_request:
    branches: [ main ]

permissions:
  issues: write

jobs:
  build_and_test:

    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        # Variabel lingkungan untuk database sementara
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        # Opsi untuk memeriksa kesehatan database sebelum tes dijalankan
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

    # Job ini tetap berjalan di server GitHub untuk testing awal
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install dependencies
        run: npm install
      - name: Run Unit Tests
        run: npm test

      - name: Run Unit Tests
        env:
          # Variabel ini akan digunakan oleh aplikasi saat 'npm test' berjalan
          DB_HOST: localhost 
          DB_PORT: 5432 # Gunakan port yang dipetakan dari service container
          DB_USER: testuser
          DB_PASSWORD: testpassword
          DB_NAME: testdb
          SESSION_SECRET: a-test-secret-for-ci
        run: npm test
  

  sast_scan:
    needs: build_and_test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install dependencies
        run: npm install
      - name: Run NPM Audit (Dependency Scanning)
        run: npm audit --audit-level=critical

  deploy_and_scan_on_staging:
    name: Deploy and DAST Scan on Staging
    needs: [build_and_test, sast_scan]
    runs-on: self-hosted 
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file for Docker Compose
        # Langkah ini membuat file .env di runner menggunakan secrets
        run: |
          echo "SESSION_SECRET=${{ secrets.SESSION_SECRET }}" > .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_HOST=db" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env

      - name: Deploy Application with Docker Compose
        run: |
          # Hentikan dan hapus semua container & volume lama dari proses sebelumnya
          docker-compose down -v --remove-orphans
          # Jalankan dari awal yang bersih
          docker-compose up --build -d

      - name: Wait for application to be ready
        run: sleep 30

      - name: Run DAST Scan on Local Application
        # Kita kembalikan target ke 3001 sesuai port di docker-compose.yml
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: 'http://localhost:3001'